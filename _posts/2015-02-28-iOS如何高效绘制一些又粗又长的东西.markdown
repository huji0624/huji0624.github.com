---
author: huji
comments: true
date: 2015-02-28 17:01:16+00:00
layout: post
slug: iOS如何高效绘制一些又粗又长的东西
title: iOS如何高效绘制一些又粗又长的东西
categories:
- ios
---
好吧，这里的重点其实是高效绘制，又粗又长无非是一些文字或者曲线等矢量数据，对此比较失望的同学可以移步其（草）它（榴）地（社）方（区）。

这里的高效主要有两层含义，一是快，二是内存占用最小。

首先推荐一本书《iOS:Core Animation Advanced Techniques》，一本非常不错的对iOS的绘制原理讲解得比较清楚的书，虽然我有些部分还有些疑惑和怀疑，但足以解决工程中遇到的大部分问题了。


假定需求：

需要在一定大小的区域绘制一些曲线和图形，该区域比屏幕大，因此需要可以平滑地拖动，整个视图背景为白色，绘制区域的边界和屏幕边界有一定大小的空隙。（最终效果可能像下面这样）


--image--
<svg width="580" height="400" xmlns="http://www.w3.org/2000/svg">
 <!-- Created with Method Draw - http://github.com/duopixel/Method-Draw/ -->
 <g>
  <title>background</title>
  <rect fill="#fff" id="canvas_background" height="402" width="582" y="-1" x="-1"/>
  <g display="none" overflow="visible" y="0" x="0" height="100%" width="100%" id="canvasGrid">
   <rect fill="url(#gridpattern)" stroke-width="0" y="0" x="0" height="100%" width="100%"/>
  </g>
 </g>
 <g>
  <title>Layer 1</title>
  <path d="m208,119c1,0 2,0 4,0c5,0 9,0 14,0c5,0 12.071793,-0.308754 17,1c6.112686,1.623314 8.723984,4.222733 12,8c2.779785,3.205124 5.75531,6.132004 8,10c1.809723,3.118484 4.112152,6.918304 7,11c2.082458,2.943359 3.493469,6.878555 4,10c0.320374,1.974182 1,5 1,7c0,3 0,6 0,10c0,4 0.087677,7.03067 -1,10c-1.852264,5.056595 -2.847229,8.041321 -4,12c-0.884125,3.036163 -2,6 -2,10c0,2 0,6 0,9c0,3 -0.307465,5.186005 1,7c0.826904,1.147263 2.805664,1.44841 7,3c3.867004,1.430496 8.132019,2.75531 12,5c3.118469,1.809723 6.076904,3.731445 10,5c5.123962,1.656845 7,3 12,4c5,1 9.025208,1.881332 14,3c4.022644,0.904556 11.029968,1.511261 15,2c4.092224,0.503769 8,1 11,1c3,0 5,0 7,0c4,0 6,0 8,0c2,0 3,0 4,0c1,0 2.823761,-1.486252 5,-2c1.946503,-0.459503 4,-1 7,-2l1,-1l3,-1" id="svg_1" stroke-width="1.5" stroke="#000" fill="none"/>
  <line stroke="#000" stroke-linecap="undefined" stroke-linejoin="undefined" id="svg_3" y2="89.000003" x2="342.000004" y1="254" x1="190" stroke-width="1.5" fill="none"/>
  <path d="m155,192c2,0 7,0 16,0c18,0 36,0 54,0c20,0 38,0 52,0c14,0 28,0 37,0c7,0 12,0 16,0c4,0 7,-2 9,-3c4,-2 7.132019,-3.75531 11,-6c3.118469,-1.809723 6.812653,-3.206802 9,-5c2.78833,-2.285873 5.076111,-2.61731 6,-3c1.306549,-0.541199 2.967651,-2.116898 10,-4c7.965576,-2.132996 14.01828,-3.933792 25,-7c7.011932,-1.957794 12.880493,-5.251938 19,-8c4.912567,-2.20607 9,-7 11,-10c2,-3 3.731445,-6.076889 5,-10c1.65686,-5.123947 2.507324,-12.02433 3,-17c0.502441,-5.074203 2,-8 2,-9c0,-2 1,-4 2,-6l0,-2l1,-1l0,-1" id="svg_11" stroke-width="1.5" stroke="#FFA9A2" fill="none"/>
  <path d="m179,93c0,1 0,3 0,6c0,3 0,8 0,14c0,6 0,13 0,19c0,6 1,12 1,17c0,5 0,9 0,15c0,5 0,11 0,16c0,6 0.199081,11.06456 1,16c0.506546,3.121445 2,6 3,9c1,3 -0.280685,6.565109 2,10c2.765732,4.165421 7.014984,5.75563 9,6c4.092209,0.503769 5.089539,1.871811 8,4c5.168716,3.779465 9.850754,9.210052 14,12c4.838806,3.253601 9.132004,5.75531 13,8c3.118484,1.809723 4.702667,3.541367 8,5c3.770645,1.668015 9.041321,2.847229 13,4c3.036163,0.88414 5.026764,1.770248 6,2c2.176239,0.513733 4,1 6,1c2,0 4,0 6,0c1,0 4,0 5,0l0,0" id="svg_13" fill-opacity="null" stroke-width="1.5" stroke="#C48157" fill="none"/>
 </g>
</svg>


方案外的方案：如果对某些方面要求不是那么高，其实最简单的办法就是在线下用矢量数据生成一个图片，然后加载图片，这样本文就没有任何意义了。所以设定一些前提，后文介绍的方法都是已经把相应数据转化成了下面这种类型的数据来进行绘制，另外为了实现平滑的滚动，可能会设法把一些东西利用UIScrollview来做，否则可能很难达到如丝般顺滑的效果：
<pre>
@interface Path : NSObject
@property (nonatomic,strong) UIBezierPath *path;
@property (nonatomic,strong) UIColor *color;
@end
</pre>
尝试一：UIView + drawRect


这应该是通常多数人第一印象的方法，但基本上来说，如果你没有任何分析，直接就开始堆代码，出来的方案总是或多或少有些坑在里面。所以我们得先明确下面几个点：


1.当覆盖drawRect方法的时候，为了缓存你所绘制的内容，UIView会生成一个backing bitmap，这个bitmap的大小和你所绘制的东西有关。


2.由于绘制的曲线比较复杂，所以一次drawRect的成本是比较高的。


基于以上两点，为了使使用最流畅，占用内存最小，我们会尽量把所有的path画到一个UIView的drawRect方法中去，并且除了把UIView加到视图树中，使UIView显示出来，这会引起drawRect被调用一次之外，不在做其他操作引起UIView的重绘（也免得再有一次数据上屏）。

大体代码可能是这样的：
<pre>
@interface CanvasView : UIView
@property (nonatomic,strong) NSArray *pathes;
@end
@implementation CanvasView
-(void)drawRect:(CGRect)rect{
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    
    CGContextSetFillColorWithColor(ctx, [UIColor whiteColor].CGColor);
    CGContextFillRect(ctx, rect);
    
    for (Path *path in self.pathes) {
        CGContextBeginPath(ctx);
        CGContextSetLineWidth(ctx, path.path.lineWidth);
        CGContextSetStrokeColorWithColor(ctx, path.color.CGColor);
        CGContextAddPath(ctx, path.path.CGPath);
        CGContextStrokePath(ctx);
    }
}
@end
</pre>
这里其实还有一个潜在的内存浪费，这也是我目前还理解得不是非常清楚的，我把它认为是UIView的光栅化。根据实践发现，UIView所创建的backing bitmap的大小并不是完全和你的frame的大小正相关的，而是和你所绘制内容所占内存块的大小正相关。


比如你的UIView的frame是(0,0,100,100)，你在外截边界为(0,0,20,10)和（50，50，10，5）这块区域绘制了一些UIBezierPath，那么实际上你的backing bitmap的大小并不是100x100x4，而是(10+5)x100x4，这就是我所说的UIView的光栅化。所以如果你把整个UIView的背景色用backgroundColor的方式，或者上面的fillRect的方式把整个UIView填充为白色的时候，实际上就是把backing bitmap扩大了。我猜测这种实现是为了达到某种内存对齐的效果，否则其实可以光栅化得更彻底，只需要10x20x4+10x5x4的内存，岂不是更省。那如何实现白色背景和滑动呢，在这个UIView的外层套一个UIScorllView并把这个UIScrollView的背景色设置为白色。


尝试二：CALayer + drawInContext 


利用CALayer来绘制的方法和上面的代码大同小异，区别只是你需要弄一个CanvasLayer来继承CALayer，然后在drawInContext方法中来绘制。


根据我目前的理解，采用这种方式并不会比第一种更快或者更省内存，实际上的最终的原理可能都是一样的，利用了CALayer的backing bitmap使滑动流畅，使用cpu将数据画到了那块缓存的bitmap上面。但使用calayer也有其他好处：


一.可以利用contentsScale来控制绘制内容的大小来调节清晰度，不用自己去做相应的换算。


二.可以在子线程中进行绘制，不会阻塞主线程，但由于主线程的cpu切片时间应该会更多，所以绘制不会更快，但用户体验会好一些。


有一点很奇怪的是CALayer设置了backgroundColor并不会影响CALayer所占内存大小，我觉得UIView的backgroundColor和CALayer的backgroundColor应该是不同的实现.


尝试三：CAShapeLayer


相比与其他两种方法，这种方法是内存占用最少的，几乎只会占用数据本身的内存大小。从绘制效率来说，既可以说它是最快的方式，也可以说它的是最慢的方式，这个得根据具体的使用场景来看。这个在我们的假定需求中说得并不明确。


首先看看CAShapeLayer的特点：利用GPU进行矢量绘制，单位条path的绘制效率很高，由于是矢量绘制，所以放大后也不会模糊，额外占用内存几乎为零。


但是在实际情况下，我发现这种方法有很多局限性：


1.因为计算二次曲线这些运算是非常耗时的，要一个点一个点地去算，由于没有进行缓存，每次滚动都会进行重绘，所以如果曲线比较复杂，在低端手机上的滚动体验非常差，我猜测如果曲线非常复杂，高端机的滚动体验也会很糟糕。


2.即便是高端机，在简单demo上的体验还行，但在实际项目中，一个进程中的各种任务很多，也会使滚动体验很差，我估计也许gpu也被分去做其他事情了。


所以综合看来，这种绘制方式的使用场景并不适合这种一次绘制的情况。我的理解是，CAShapeLayer是被设计用来展现一些快速变化的图形用的，因为不需要创建backing bitmap，只是数据上屏也比较快。


------------分割线--------------


综上，可以看出来，其实在iOS中，尤其是偏向应用层的地方，很多时候优化已经被系统层想得比较全了，应用层更多地是搞清楚系统的设计逻辑，并且去衡量，在自己的使用场景中，到底是用空间换时间还是时间换空间，这其实是没有完美的答案的。